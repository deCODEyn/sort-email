name: CI & Deploy (Render backend + Netlify frontend - Docker-first)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend
  RENDER_BRANCH: main

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Criar .env.development na raiz
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env.development
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env.development
          echo "GEMINI_MODEL_NAME=${{ secrets.GEMINI_MODEL_NAME }}" >> .env.development
          echo "GROQ_MODEL_NAME=${{ secrets.GROQ_MODEL_NAME }}" >> .env.development
      - run: npm run test:backend

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm run test:frontend

  deploy-backend:
    name: Deploy backend → Render
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq curl
      - name: Trigger Render deploy (create deploy from branch)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          RENDER_BRANCH: ${{ env.RENDER_BRANCH }}
        run: |
          echo "Triggering deploy on Render for service ${RENDER_SERVICE_ID} (branch ${RENDER_BRANCH})..."
          data=$(printf '{"branch":"%s"}' "$RENDER_BRANCH")
          echo "Payload JSON: $data"
          resp=$(curl -s -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            --data-raw "$data")
          echo "Response from Render:"
          echo "$resp" | jq .
          deploy_id=$(echo "$resp" | jq -r .id)
          if [ -z "$deploy_id" ] || [ "$deploy_id" = "null" ]; then
            echo "Failed to create Render deploy. Response:"; echo "$resp"; exit 1
          fi
          echo "Deploy ID: $deploy_id"
          echo "Polling deploy status..."
          for i in $(seq 1 60); do
            status_resp=$(curl -s -H "Authorization: Bearer ${RENDER_API_KEY}" \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys/${deploy_id}")
            state=$(echo "$status_resp" | jq -r .state)
            echo "[$i] deploy state: $state"
            if [ "$state" = "success" ]; then
              echo "Render deploy succeeded."
              exit 0
            fi
            if [ "$state" = "failed" ]; then
              echo "Render deploy failed. Response:"; echo "$status_resp"; exit 1
            fi
            sleep 10
          done
          echo "Timeout waiting for Render deploy to finish."; exit 1

  deploy-frontend:
    name: Deploy frontend → Netlify
    runs-on: ubuntu-latest
    needs: test-frontend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Build frontend Docker image
        env:
          RENDER_SERVICE_URL: ${{ secrets.RENDER_SERVICE_URL }}
        run: |
          echo "Building frontend with VITE_API_URL=${RENDER_SERVICE_URL}/api"
          docker build \
            --build-arg VITE_API_URL="${RENDER_SERVICE_URL}/api" \
            -t frontend-prod "${{ env.FRONTEND_DIR }}"
      - name: Extract built static files (dist) from container
        run: |
          cid=$(docker create frontend-prod)
          mkdir -p ./dist
          docker cp $cid:/usr/share/nginx/html/. ./dist
          docker rm $cid
          ls -R ./dist
      - name: Add SPA redirect rules for Netlify
        run: |
          echo "/* /index.html 200" > ./dist/_redirects
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
      - name: Deploy to Netlify (production)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          netlify deploy \
            --site="${NETLIFY_SITE_ID}" \
            --auth="${NETLIFY_AUTH_TOKEN}" \
            --prod \
            --dir=./dist
